/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.43
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for the /2/module/authenticate/authenticate API Request
    /// </summary>
    [DataContract(Name = "authenticate-authenticate-v2-Response-mPayload")]
    public partial class AuthenticateAuthenticateV2ResponseMPayload : IEquatable<AuthenticateAuthenticateV2ResponseMPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateAuthenticateV2ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticateAuthenticateV2ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateAuthenticateV2ResponseMPayload" /> class.
        /// </summary>
        /// <param name="sAuthorization">The Authorization key (required).</param>
        /// <param name="sSecret">The secret key (required).</param>
        public AuthenticateAuthenticateV2ResponseMPayload(string sAuthorization = default(string), string sSecret = default(string))
        {
            // to ensure "sAuthorization" is required (not null)
            this.SAuthorization = sAuthorization ?? throw new ArgumentNullException("sAuthorization is a required property for AuthenticateAuthenticateV2ResponseMPayload and cannot be null");
            // to ensure "sSecret" is required (not null)
            this.SSecret = sSecret ?? throw new ArgumentNullException("sSecret is a required property for AuthenticateAuthenticateV2ResponseMPayload and cannot be null");
        }

        /// <summary>
        /// The Authorization key
        /// </summary>
        /// <value>The Authorization key</value>
        [DataMember(Name = "sAuthorization", IsRequired = true, EmitDefaultValue = false)]
        public string SAuthorization { get; set; }

        /// <summary>
        /// The secret key
        /// </summary>
        /// <value>The secret key</value>
        [DataMember(Name = "sSecret", IsRequired = true, EmitDefaultValue = false)]
        public string SSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticateAuthenticateV2ResponseMPayload {\n");
            sb.Append("  SAuthorization: ").Append(SAuthorization).Append("\n");
            sb.Append("  SSecret: ").Append(SSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticateAuthenticateV2ResponseMPayload);
        }

        /// <summary>
        /// Returns true if AuthenticateAuthenticateV2ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticateAuthenticateV2ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticateAuthenticateV2ResponseMPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SAuthorization == input.SAuthorization ||
                    (this.SAuthorization != null &&
                    this.SAuthorization.Equals(input.SAuthorization))
                ) && 
                (
                    this.SSecret == input.SSecret ||
                    (this.SSecret != null &&
                    this.SSecret.Equals(input.SSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SAuthorization != null)
                    hashCode = hashCode * 59 + this.SAuthorization.GetHashCode();
                if (this.SSecret != null)
                    hashCode = hashCode * 59 + this.SSecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
