/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.41
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for the /1/object/activesession/getCurrent API Request
    /// </summary>
    [DataContract(Name = "activesession-getCurrent-v1-Response-mPayload")]
    public partial class ActivesessionGetCurrentV1ResponseMPayload : IEquatable<ActivesessionGetCurrentV1ResponseMPayload>, IValidatableObject
    {
        /// <summary>
        /// The type of session used for the API request call
        /// </summary>
        /// <value>The type of session used for the API request call</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EActivesessionSessiontypeEnum
        {
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 1

        }


        /// <summary>
        /// The type of session used for the API request call
        /// </summary>
        /// <value>The type of session used for the API request call</value>
        [DataMember(Name = "eActivesessionSessiontype", IsRequired = true, EmitDefaultValue = false)]
        public EActivesessionSessiontypeEnum EActivesessionSessiontype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionGetCurrentV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionGetCurrentV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionGetCurrentV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="sCustomerCode">The customer code specific to the client in which the API request is being made (required).</param>
        /// <param name="eActivesessionSessiontype">The type of session used for the API request call (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sCompanyNameX">The name of the active Company in the current language (required).</param>
        /// <param name="sDepartmentNameX">The name of the active Department in the current language (required).</param>
        /// <param name="aRegisteredModules">An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. (required).</param>
        /// <param name="aPermissions">An array of permissions granted to the user or api key (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey (required).</param>
        public ActivesessionGetCurrentV1ResponseMPayload(string sCustomerCode = default(string), EActivesessionSessiontypeEnum eActivesessionSessiontype = default(EActivesessionSessiontypeEnum), int fkiLanguageID = default(int), string sCompanyNameX = default(string), string sDepartmentNameX = default(string), List<string> aRegisteredModules = default(List<string>), List<int> aPermissions = default(List<int>), int fkiUserID = default(int), int fkiApikeyID = default(int))
        {
            // to ensure "sCustomerCode" is required (not null)
            this.SCustomerCode = sCustomerCode ?? throw new ArgumentNullException("sCustomerCode is a required property for ActivesessionGetCurrentV1ResponseMPayload and cannot be null");
            this.EActivesessionSessiontype = eActivesessionSessiontype;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sCompanyNameX" is required (not null)
            this.SCompanyNameX = sCompanyNameX ?? throw new ArgumentNullException("sCompanyNameX is a required property for ActivesessionGetCurrentV1ResponseMPayload and cannot be null");
            // to ensure "sDepartmentNameX" is required (not null)
            this.SDepartmentNameX = sDepartmentNameX ?? throw new ArgumentNullException("sDepartmentNameX is a required property for ActivesessionGetCurrentV1ResponseMPayload and cannot be null");
            // to ensure "aRegisteredModules" is required (not null)
            this.ARegisteredModules = aRegisteredModules ?? throw new ArgumentNullException("aRegisteredModules is a required property for ActivesessionGetCurrentV1ResponseMPayload and cannot be null");
            // to ensure "aPermissions" is required (not null)
            this.APermissions = aPermissions ?? throw new ArgumentNullException("aPermissions is a required property for ActivesessionGetCurrentV1ResponseMPayload and cannot be null");
            this.FkiUserID = fkiUserID;
            this.FkiApikeyID = fkiApikeyID;
        }

        /// <summary>
        /// The customer code specific to the client in which the API request is being made
        /// </summary>
        /// <value>The customer code specific to the client in which the API request is being made</value>
        [DataMember(Name = "sCustomerCode", IsRequired = true, EmitDefaultValue = false)]
        public string SCustomerCode { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = false)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The name of the active Company in the current language
        /// </summary>
        /// <value>The name of the active Company in the current language</value>
        [DataMember(Name = "sCompanyNameX", IsRequired = true, EmitDefaultValue = false)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The name of the active Department in the current language
        /// </summary>
        /// <value>The name of the active Department in the current language</value>
        [DataMember(Name = "sDepartmentNameX", IsRequired = true, EmitDefaultValue = false)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
        /// </summary>
        /// <value>An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.</value>
        [DataMember(Name = "a_RegisteredModules", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ARegisteredModules { get; set; }

        /// <summary>
        /// An array of permissions granted to the user or api key
        /// </summary>
        /// <value>An array of permissions granted to the user or api key</value>
        [DataMember(Name = "a_Permissions", IsRequired = true, EmitDefaultValue = false)]
        public List<int> APermissions { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        [DataMember(Name = "fkiApikeyID", IsRequired = true, EmitDefaultValue = false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivesessionGetCurrentV1ResponseMPayload {\n");
            sb.Append("  SCustomerCode: ").Append(SCustomerCode).Append("\n");
            sb.Append("  EActivesessionSessiontype: ").Append(EActivesessionSessiontype).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  ARegisteredModules: ").Append(ARegisteredModules).Append("\n");
            sb.Append("  APermissions: ").Append(APermissions).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivesessionGetCurrentV1ResponseMPayload);
        }

        /// <summary>
        /// Returns true if ActivesessionGetCurrentV1ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivesessionGetCurrentV1ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivesessionGetCurrentV1ResponseMPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SCustomerCode == input.SCustomerCode ||
                    (this.SCustomerCode != null &&
                    this.SCustomerCode.Equals(input.SCustomerCode))
                ) && 
                (
                    this.EActivesessionSessiontype == input.EActivesessionSessiontype ||
                    this.EActivesessionSessiontype.Equals(input.EActivesessionSessiontype)
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    this.FkiLanguageID.Equals(input.FkiLanguageID)
                ) && 
                (
                    this.SCompanyNameX == input.SCompanyNameX ||
                    (this.SCompanyNameX != null &&
                    this.SCompanyNameX.Equals(input.SCompanyNameX))
                ) && 
                (
                    this.SDepartmentNameX == input.SDepartmentNameX ||
                    (this.SDepartmentNameX != null &&
                    this.SDepartmentNameX.Equals(input.SDepartmentNameX))
                ) && 
                (
                    this.ARegisteredModules == input.ARegisteredModules ||
                    this.ARegisteredModules != null &&
                    input.ARegisteredModules != null &&
                    this.ARegisteredModules.SequenceEqual(input.ARegisteredModules)
                ) && 
                (
                    this.APermissions == input.APermissions ||
                    this.APermissions != null &&
                    input.APermissions != null &&
                    this.APermissions.SequenceEqual(input.APermissions)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.FkiApikeyID == input.FkiApikeyID ||
                    this.FkiApikeyID.Equals(input.FkiApikeyID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SCustomerCode != null)
                    hashCode = hashCode * 59 + this.SCustomerCode.GetHashCode();
                hashCode = hashCode * 59 + this.EActivesessionSessiontype.GetHashCode();
                hashCode = hashCode * 59 + this.FkiLanguageID.GetHashCode();
                if (this.SCompanyNameX != null)
                    hashCode = hashCode * 59 + this.SCompanyNameX.GetHashCode();
                if (this.SDepartmentNameX != null)
                    hashCode = hashCode * 59 + this.SDepartmentNameX.GetHashCode();
                if (this.ARegisteredModules != null)
                    hashCode = hashCode * 59 + this.ARegisteredModules.GetHashCode();
                if (this.APermissions != null)
                    hashCode = hashCode * 59 + this.APermissions.GetHashCode();
                hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                hashCode = hashCode * 59 + this.FkiApikeyID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiLanguageID (int) maximum
            if(this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if(this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            yield break;
        }
    }

}
