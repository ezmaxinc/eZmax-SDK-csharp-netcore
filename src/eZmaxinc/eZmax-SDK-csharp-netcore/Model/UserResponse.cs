/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.21
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxinc/eZmax-SDK-csharp-netcore.Client.OpenAPIDateConverter;

namespace eZmaxinc/eZmax-SDK-csharp-netcore.Model
{
    /// <summary>
    /// A User Object
    /// </summary>
    [DataContract(Name = "user-Response")]
    public partial class UserResponse : IEquatable<UserResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponse" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="eUserType">eUserType (required).</param>
        /// <param name="sUserFirstname">The First name of the user (required).</param>
        /// <param name="sUserLastname">The Last name of the user (required).</param>
        /// <param name="sUserLoginname">The Login name of the User. (required).</param>
        /// <param name="fkiUserIDCreated">The id of the User that created the object. (required).</param>
        /// <param name="fkiUserIDModified">The id of the User that made the last modification on the object. (required).</param>
        /// <param name="fkiApikeyIDCreated">The id of the API Key that created the object..</param>
        /// <param name="fkiApikeyIDModified">The id of the API Key that made the last modification on the object..</param>
        /// <param name="dtCreatedDate">Represent a Date Time. The timezone is the one configured in the User&#39;s profile. (required).</param>
        /// <param name="dtModifiedDate">Represent a Date Time. The timezone is the one configured in the User&#39;s profile. (required).</param>
        public UserResponse(int pkiUserID = default(int), int fkiLanguageID = default(int), FieldEUserType eUserType = default(FieldEUserType), string sUserFirstname = default(string), string sUserLastname = default(string), string sUserLoginname = default(string), int fkiUserIDCreated = default(int), int fkiUserIDModified = default(int), int fkiApikeyIDCreated = default(int), int fkiApikeyIDModified = default(int), string dtCreatedDate = default(string), string dtModifiedDate = default(string))
        {
            this.pkiUserID = pkiUserID;
            this.fkiLanguageID = fkiLanguageID;
            // to ensure "eUserType" is required (not null)
            this.eUserType = eUserType ?? throw new ArgumentNullException("eUserType is a required property for UserResponse and cannot be null");
            // to ensure "sUserFirstname" is required (not null)
            this.sUserFirstname = sUserFirstname ?? throw new ArgumentNullException("sUserFirstname is a required property for UserResponse and cannot be null");
            // to ensure "sUserLastname" is required (not null)
            this.sUserLastname = sUserLastname ?? throw new ArgumentNullException("sUserLastname is a required property for UserResponse and cannot be null");
            // to ensure "sUserLoginname" is required (not null)
            this.sUserLoginname = sUserLoginname ?? throw new ArgumentNullException("sUserLoginname is a required property for UserResponse and cannot be null");
            this.fkiUserIDCreated = fkiUserIDCreated;
            this.fkiUserIDModified = fkiUserIDModified;
            // to ensure "dtCreatedDate" is required (not null)
            this.dtCreatedDate = dtCreatedDate ?? throw new ArgumentNullException("dtCreatedDate is a required property for UserResponse and cannot be null");
            // to ensure "dtModifiedDate" is required (not null)
            this.dtModifiedDate = dtModifiedDate ?? throw new ArgumentNullException("dtModifiedDate is a required property for UserResponse and cannot be null");
            this.fkiApikeyIDCreated = fkiApikeyIDCreated;
            this.fkiApikeyIDModified = fkiApikeyIDModified;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name = "pkiUserID", IsRequired = true, EmitDefaultValue = false)]
        public int pkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = false)]
        public int fkiLanguageID { get; set; }

        /// <summary>
        /// Gets or Sets eUserType
        /// </summary>
        [DataMember(Name = "eUserType", IsRequired = true, EmitDefaultValue = false)]
        public FieldEUserType eUserType { get; set; }

        /// <summary>
        /// The First name of the user
        /// </summary>
        /// <value>The First name of the user</value>
        [DataMember(Name = "sUserFirstname", IsRequired = true, EmitDefaultValue = false)]
        public string sUserFirstname { get; set; }

        /// <summary>
        /// The Last name of the user
        /// </summary>
        /// <value>The Last name of the user</value>
        [DataMember(Name = "sUserLastname", IsRequired = true, EmitDefaultValue = false)]
        public string sUserLastname { get; set; }

        /// <summary>
        /// The Login name of the User.
        /// </summary>
        /// <value>The Login name of the User.</value>
        [DataMember(Name = "sUserLoginname", IsRequired = true, EmitDefaultValue = false)]
        public string sUserLoginname { get; set; }

        /// <summary>
        /// The id of the User that created the object.
        /// </summary>
        /// <value>The id of the User that created the object.</value>
        [DataMember(Name = "fkiUserIDCreated", IsRequired = true, EmitDefaultValue = false)]
        public int fkiUserIDCreated { get; set; }

        /// <summary>
        /// The id of the User that made the last modification on the object.
        /// </summary>
        /// <value>The id of the User that made the last modification on the object.</value>
        [DataMember(Name = "fkiUserIDModified", IsRequired = true, EmitDefaultValue = false)]
        public int fkiUserIDModified { get; set; }

        /// <summary>
        /// The id of the API Key that created the object.
        /// </summary>
        /// <value>The id of the API Key that created the object.</value>
        [DataMember(Name = "fkiApikeyIDCreated", EmitDefaultValue = false)]
        public int fkiApikeyIDCreated { get; set; }

        /// <summary>
        /// The id of the API Key that made the last modification on the object.
        /// </summary>
        /// <value>The id of the API Key that made the last modification on the object.</value>
        [DataMember(Name = "fkiApikeyIDModified", EmitDefaultValue = false)]
        public int fkiApikeyIDModified { get; set; }

        /// <summary>
        /// Represent a Date Time. The timezone is the one configured in the User&#39;s profile.
        /// </summary>
        /// <value>Represent a Date Time. The timezone is the one configured in the User&#39;s profile.</value>
        [DataMember(Name = "dtCreatedDate", IsRequired = true, EmitDefaultValue = false)]
        public string dtCreatedDate { get; set; }

        /// <summary>
        /// Represent a Date Time. The timezone is the one configured in the User&#39;s profile.
        /// </summary>
        /// <value>Represent a Date Time. The timezone is the one configured in the User&#39;s profile.</value>
        [DataMember(Name = "dtModifiedDate", IsRequired = true, EmitDefaultValue = false)]
        public string dtModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserResponse {\n");
            sb.Append("  pkiUserID: ").Append(pkiUserID).Append("\n");
            sb.Append("  fkiLanguageID: ").Append(fkiLanguageID).Append("\n");
            sb.Append("  eUserType: ").Append(eUserType).Append("\n");
            sb.Append("  sUserFirstname: ").Append(sUserFirstname).Append("\n");
            sb.Append("  sUserLastname: ").Append(sUserLastname).Append("\n");
            sb.Append("  sUserLoginname: ").Append(sUserLoginname).Append("\n");
            sb.Append("  fkiUserIDCreated: ").Append(fkiUserIDCreated).Append("\n");
            sb.Append("  fkiUserIDModified: ").Append(fkiUserIDModified).Append("\n");
            sb.Append("  fkiApikeyIDCreated: ").Append(fkiApikeyIDCreated).Append("\n");
            sb.Append("  fkiApikeyIDModified: ").Append(fkiApikeyIDModified).Append("\n");
            sb.Append("  dtCreatedDate: ").Append(dtCreatedDate).Append("\n");
            sb.Append("  dtModifiedDate: ").Append(dtModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResponse);
        }

        /// <summary>
        /// Returns true if UserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.pkiUserID == input.pkiUserID ||
                    this.pkiUserID.Equals(input.pkiUserID)
                ) && 
                (
                    this.fkiLanguageID == input.fkiLanguageID ||
                    this.fkiLanguageID.Equals(input.fkiLanguageID)
                ) && 
                (
                    this.eUserType == input.eUserType ||
                    (this.eUserType != null &&
                    this.eUserType.Equals(input.eUserType))
                ) && 
                (
                    this.sUserFirstname == input.sUserFirstname ||
                    (this.sUserFirstname != null &&
                    this.sUserFirstname.Equals(input.sUserFirstname))
                ) && 
                (
                    this.sUserLastname == input.sUserLastname ||
                    (this.sUserLastname != null &&
                    this.sUserLastname.Equals(input.sUserLastname))
                ) && 
                (
                    this.sUserLoginname == input.sUserLoginname ||
                    (this.sUserLoginname != null &&
                    this.sUserLoginname.Equals(input.sUserLoginname))
                ) && 
                (
                    this.fkiUserIDCreated == input.fkiUserIDCreated ||
                    this.fkiUserIDCreated.Equals(input.fkiUserIDCreated)
                ) && 
                (
                    this.fkiUserIDModified == input.fkiUserIDModified ||
                    this.fkiUserIDModified.Equals(input.fkiUserIDModified)
                ) && 
                (
                    this.fkiApikeyIDCreated == input.fkiApikeyIDCreated ||
                    this.fkiApikeyIDCreated.Equals(input.fkiApikeyIDCreated)
                ) && 
                (
                    this.fkiApikeyIDModified == input.fkiApikeyIDModified ||
                    this.fkiApikeyIDModified.Equals(input.fkiApikeyIDModified)
                ) && 
                (
                    this.dtCreatedDate == input.dtCreatedDate ||
                    (this.dtCreatedDate != null &&
                    this.dtCreatedDate.Equals(input.dtCreatedDate))
                ) && 
                (
                    this.dtModifiedDate == input.dtModifiedDate ||
                    (this.dtModifiedDate != null &&
                    this.dtModifiedDate.Equals(input.dtModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.pkiUserID.GetHashCode();
                hashCode = hashCode * 59 + this.fkiLanguageID.GetHashCode();
                if (this.eUserType != null)
                    hashCode = hashCode * 59 + this.eUserType.GetHashCode();
                if (this.sUserFirstname != null)
                    hashCode = hashCode * 59 + this.sUserFirstname.GetHashCode();
                if (this.sUserLastname != null)
                    hashCode = hashCode * 59 + this.sUserLastname.GetHashCode();
                if (this.sUserLoginname != null)
                    hashCode = hashCode * 59 + this.sUserLoginname.GetHashCode();
                hashCode = hashCode * 59 + this.fkiUserIDCreated.GetHashCode();
                hashCode = hashCode * 59 + this.fkiUserIDModified.GetHashCode();
                hashCode = hashCode * 59 + this.fkiApikeyIDCreated.GetHashCode();
                hashCode = hashCode * 59 + this.fkiApikeyIDModified.GetHashCode();
                if (this.dtCreatedDate != null)
                    hashCode = hashCode * 59 + this.dtCreatedDate.GetHashCode();
                if (this.dtModifiedDate != null)
                    hashCode = hashCode * 59 + this.dtModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // fkiLanguageID (int) maximum
            if(this.fkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for fkiLanguageID, must be a value less than or equal to 2.", new [] { "fkiLanguageID" });
            }

            // fkiLanguageID (int) minimum
            if(this.fkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for fkiLanguageID, must be a value greater than or equal to 1.", new [] { "fkiLanguageID" });
            }

            yield break;
        }
    }

}
