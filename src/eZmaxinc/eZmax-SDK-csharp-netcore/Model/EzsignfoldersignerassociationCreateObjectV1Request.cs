/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.33
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxinc/eZmax-SDK-csharp-netcore.Client.OpenAPIDateConverter;

namespace eZmaxinc/eZmax-SDK-csharp-netcore.Model
{
    /// <summary>
    /// Request for the /1/object/ezsignfoldersignerassociation/createObject API Request
    /// </summary>
    [DataContract(Name = "ezsignfoldersignerassociation-createObject-v1-Request")]
    public partial class EzsignfoldersignerassociationCreateObjectV1Request : IEquatable<EzsignfoldersignerassociationCreateObjectV1Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationCreateObjectV1Request" /> class.
        /// </summary>
        /// <param name="objEzsignfoldersignerassociation">objEzsignfoldersignerassociation.</param>
        /// <param name="objEzsignfoldersignerassociationCompound">objEzsignfoldersignerassociationCompound.</param>
        public EzsignfoldersignerassociationCreateObjectV1Request(EzsignfoldersignerassociationRequest objEzsignfoldersignerassociation = default(EzsignfoldersignerassociationRequest), EzsignfoldersignerassociationRequestCompound objEzsignfoldersignerassociationCompound = default(EzsignfoldersignerassociationRequestCompound))
        {
            this.objEzsignfoldersignerassociation = objEzsignfoldersignerassociation;
            this.objEzsignfoldersignerassociationCompound = objEzsignfoldersignerassociationCompound;
        }

        /// <summary>
        /// Gets or Sets objEzsignfoldersignerassociation
        /// </summary>
        [DataMember(Name = "objEzsignfoldersignerassociation", EmitDefaultValue = false)]
        public EzsignfoldersignerassociationRequest objEzsignfoldersignerassociation { get; set; }

        /// <summary>
        /// Gets or Sets objEzsignfoldersignerassociationCompound
        /// </summary>
        [DataMember(Name = "objEzsignfoldersignerassociationCompound", EmitDefaultValue = false)]
        public EzsignfoldersignerassociationRequestCompound objEzsignfoldersignerassociationCompound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfoldersignerassociationCreateObjectV1Request {\n");
            sb.Append("  objEzsignfoldersignerassociation: ").Append(objEzsignfoldersignerassociation).Append("\n");
            sb.Append("  objEzsignfoldersignerassociationCompound: ").Append(objEzsignfoldersignerassociationCompound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfoldersignerassociationCreateObjectV1Request);
        }

        /// <summary>
        /// Returns true if EzsignfoldersignerassociationCreateObjectV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfoldersignerassociationCreateObjectV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfoldersignerassociationCreateObjectV1Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.objEzsignfoldersignerassociation == input.objEzsignfoldersignerassociation ||
                    (this.objEzsignfoldersignerassociation != null &&
                    this.objEzsignfoldersignerassociation.Equals(input.objEzsignfoldersignerassociation))
                ) && 
                (
                    this.objEzsignfoldersignerassociationCompound == input.objEzsignfoldersignerassociationCompound ||
                    (this.objEzsignfoldersignerassociationCompound != null &&
                    this.objEzsignfoldersignerassociationCompound.Equals(input.objEzsignfoldersignerassociationCompound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.objEzsignfoldersignerassociation != null)
                    hashCode = hashCode * 59 + this.objEzsignfoldersignerassociation.GetHashCode();
                if (this.objEzsignfoldersignerassociationCompound != null)
                    hashCode = hashCode * 59 + this.objEzsignfoldersignerassociationCompound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
