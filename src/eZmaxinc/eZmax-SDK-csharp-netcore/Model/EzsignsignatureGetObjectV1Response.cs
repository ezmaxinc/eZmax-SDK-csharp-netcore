/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.35
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxinc/eZmax-SDK-csharp-netcore.Client.OpenAPIDateConverter;

namespace eZmaxinc/eZmax-SDK-csharp-netcore.Model
{
    /// <summary>
    /// Response for the /1/object/ezsignsignature/getObject API Request
    /// </summary>
    [DataContract(Name = "ezsignsignature-getObject-v1-Response")]
    public partial class EzsignsignatureGetObjectV1Response : IEquatable<EzsignsignatureGetObjectV1Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureGetObjectV1Response" /> class.
        /// </summary>
        /// <param name="mPayload">Payload for the /1/object/ezsignsignature/getObject API Request (required).</param>
        /// <param name="objDebugPayload">objDebugPayload.</param>
        /// <param name="objDebug">objDebug.</param>
        public EzsignsignatureGetObjectV1Response(Object mPayload = default(Object), CommonResponseObjDebugPayload objDebugPayload = default(CommonResponseObjDebugPayload), CommonResponseObjDebug objDebug = default(CommonResponseObjDebug))
        {
            // to ensure "mPayload" is required (not null)
            this.mPayload = mPayload ?? throw new ArgumentNullException("mPayload is a required property for EzsignsignatureGetObjectV1Response and cannot be null");
            this.objDebugPayload = objDebugPayload;
            this.objDebug = objDebug;
        }

        /// <summary>
        /// Payload for the /1/object/ezsignsignature/getObject API Request
        /// </summary>
        /// <value>Payload for the /1/object/ezsignsignature/getObject API Request</value>
        [DataMember(Name = "mPayload", IsRequired = true, EmitDefaultValue = false)]
        public Object mPayload { get; set; }

        /// <summary>
        /// Gets or Sets objDebugPayload
        /// </summary>
        [DataMember(Name = "objDebugPayload", EmitDefaultValue = false)]
        public CommonResponseObjDebugPayload objDebugPayload { get; set; }

        /// <summary>
        /// Gets or Sets objDebug
        /// </summary>
        [DataMember(Name = "objDebug", EmitDefaultValue = false)]
        public CommonResponseObjDebug objDebug { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignatureGetObjectV1Response {\n");
            sb.Append("  mPayload: ").Append(mPayload).Append("\n");
            sb.Append("  objDebugPayload: ").Append(objDebugPayload).Append("\n");
            sb.Append("  objDebug: ").Append(objDebug).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignatureGetObjectV1Response);
        }

        /// <summary>
        /// Returns true if EzsignsignatureGetObjectV1Response instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignatureGetObjectV1Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignatureGetObjectV1Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.mPayload == input.mPayload ||
                    (this.mPayload != null &&
                    this.mPayload.Equals(input.mPayload))
                ) && 
                (
                    this.objDebugPayload == input.objDebugPayload ||
                    (this.objDebugPayload != null &&
                    this.objDebugPayload.Equals(input.objDebugPayload))
                ) && 
                (
                    this.objDebug == input.objDebug ||
                    (this.objDebug != null &&
                    this.objDebug.Equals(input.objDebug))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.mPayload != null)
                    hashCode = hashCode * 59 + this.mPayload.GetHashCode();
                if (this.objDebugPayload != null)
                    hashCode = hashCode * 59 + this.objDebugPayload.GetHashCode();
                if (this.objDebug != null)
                    hashCode = hashCode * 59 + this.objDebug.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
